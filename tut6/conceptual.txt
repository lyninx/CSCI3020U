1. Read the pthread documentation and explain the following three functions: pthread_create, pthread_join, pthread_exit

	pthread_create: Creates a new thread using four arguements.The first arguement is the thread object, the second arguement are attributes that can be applied to the thread, the third arguement is a function but can only take one parameter, the fourth is the paramater for the function in the third arguement.

	pthread_join: Suspends the calling thread to wait for successful termination of the thread specified as the first argument.
	pthread_exit: Terminates the calling thread and makes the value value_ptr available to any successful join with the terminating thread.

2. Explain how the memory of threads work in comparison to processes, do threads share the same memory, can threads access the memory of other threads?

	The memory of threads work as they each have their own unique local data. Processes do not share memory with other processes unless they have shared memory segments. A thread shares the memory of its parent process. Threads share memory of other threads that are within the same process.

3. Name the differences between multithreading​ and multiprocessing​(multiple processes). What are the advantages and disadvantages of each?

	The difference between multithreading and mutliprocessing is that multithreading is multiple threads under a single core in a multi-core processor that allows the execution of multiple processes and/or multiple threads. Mutliprocessing is where there is multiple processes that can allocated tasks between them.

4. Provide an explanation of mutual exclusion​, what is a critical section?

	Mutual exclusion is when a process is executing their critical section, no other processes can be executing their critical sections at the same time. A critical section is a part of the code that multiple processes might need to access at the same time.

5. Research the functions used to perform mutual exclusion​ with pthreads and explain the purpose of each function.

	Functions used to perform mutual exclusion with pthreads are barriers, mutexes and semaphores. Barriers force threads that are working together to wait at a specific point until all threads have reached that point, then they will continue. Mutexes act like locks when a thread is using the shared data, it locks it until it is done with the shared data, then it will unlock it. A semaphore is like mutexes as they lock the shared data until the thread is done with the shared data, then will unlock the shared data.

	Mutex has:
	pthread_mutex_init(mutex,attr)---> Initilizes the mutex with attributes.
	pthread_mutex_destroy(mutex)-----> Used to free a mutex object.
	pthread_mutexattr_init(attr)-----> Creates the mutex attribute objects.
	pthread_mutexattr_destroy(attr)--> Destroys the mutex attribute objects.
	pthread_mutex_lock(mutex)--------> Locks the mutex so no one else can use it.
	pthread_mutex_trylock(mutex)-----> Checks if the lock is locked or not.
	pthread_mutex_unlock(mutex)------> Unlocks the mutex so another thread can use it.