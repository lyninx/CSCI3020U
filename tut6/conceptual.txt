1. What is fork(), how does it differ from multi-threading (pthreads)?

	The system call fork() is used to create new processes. The process that called fork() will be the parent process, and the new process is the child process. Both processes excute the commands that follow the fork() call. Multi-threading (pthreads) differs from fork() is that fork() creates a process, and multi-threading (pthreads) creates threads.

2. What is inter-process communication (IPC)? Describe methods of performing IPC.

	The inter-process communication (IPC) is programming interfaces that allow a programmer to coordinate activities between different program processes that can run concurrently in the operating system. Methods of performing IPC would be communication through channels, application level message passing, and more. Communication through channels which work through a channel and could be through shared memory, which is through semaphores. Application level message passing which uses server resources to communicate scripts and results between processes.

3. Provide an explanation of semaphores, how do they work, how do they differ from mutual exclusion?

	A semaphore is a variable that is used for controlling access of multiple processes that are trying to use a shared resource. Semaphores work by the semaphore holding multiple identical locks. The semaphore can give away locks to processes trying to access the shared resources, until no more locks are available. All processes that want to gain access of the shared resources, they will change their flag to waiting. If they're flag is waiting, and there are locks available, one of the locks will be taken, if there are no locks available, it will stay in waiting until a lock is released. When they are finished accessing the shared resources, they will change their flag to signal and return the lock. Semaphores differ from mutual exclusion by the semaphore having multiple locks and allow multiple processes to access the shared resources while mutal exclusion doesn't allow any other process to access the share resources until the process currently executing is finished with it.

4. Provide an explanation of wait(P) and signal(V).

	wait checks if there is any keys available from the semaphore, if there is no keys, the process is put in a waiting queue. If there are keys, then it takes one of the keys and the process begins execution. signal is called when the process is done with the shared resources. Since the process is done, the process returns the key to the semaphore. 

5. Research the main functions used for semaphores in <semaphore.h> and explain each function.

	The mains functions used for semaphores in <semaphore.h> are:

	int sem_close(sem_t *):
		This function deallocates any system resources allocated by the system for use by this process for this semaphore.

	int sem_destroy(sem_t *):
		This function is used to destroy the unnamed semaphore.

	int sem_getvalue(sem_t *, int *):
		This function updates the location referenced by the sval argument to have the value of the semaphore referenced by sem without affecting the state of the semaphore.

	int sem_init(sem_t *, int, unsigned int):
		This function is used to initialise the unnamed semaphore referred to by sem.

	sem_t *sem_open(const char *, int, ...):
		This function establishes a connection between a named semaphore and a process.

	int sem_post(sem_t *):
		This function unlocks the semaphore referenced by sem by performing a semaphore unlock operation on that semaphore.

	int sem_trywait(sem_t *):
		This function locks the semaphore referenced by sem by performing a semaphore lock operation on that semaphore.

	int sem_unlink(const char *):
			This function removes the semaphore named by the string name.

	int sem_wait(sem_t *):
		This function locks the semaphore referenced by sem by performing a semaphore lock operation on that semaphore.