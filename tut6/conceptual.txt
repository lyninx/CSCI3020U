1. Read the pthread documentation and explain the following three functions: pthread_create, pthread_join, pthread_exit

	pthread_create: Creates a new thread using four arguments. The first argument is the thread object, the second argument is the attributes that can be applied to the thread, the third argument is a function but can only take one parameter, the fourth is the parameter for the function in the third argument.

	pthread_join: Suspends the calling thread to wait for successful termination of the thread specified as the first argument.
    
	pthread_exit: Terminates the calling thread and makes the value value_ptr available to any successful join with the terminating thread.

2. Explain how the memory of threads work in comparison to processes, do threads share the same memory, can threads access the memory of other threads?

    Threads share memory of other threads that are within the same process. However, they have separate stacks and local data; only global variables and the heap are shared. In contrast, processes do not share any  memory with other processes unless they have shared memory segments. 

3. Name the differences between multithreading​ and multiprocessing​(multiple processes). What are the advantages and disadvantages of each?

	The difference between multithreading and multiprocessing lie in their relative weight and their treatment by the OS. Threads are lighter than processes in terms of how easily they can be created/acquired, ease of context switching, as well as the amount of memory they consume. Threads are bound to their processes and can access more memory than between two processes, as they always share certain resources such as global variables and heap space. However, threads are much more dependent on each other than two processes are. Cooperating processes have the freedom to belong to different user and take up their own memory space. Errors inside of processes are also much more isolated than between threads.

4. Provide an explanation of mutual exclusion​, what is a critical section?

	Mutual exclusion expects that when a process is executing their critical section, no other processes can be executing their critical sections at the same time. A critical section is a part of the code that requires the manipulation of a resource that multiple threads might need to access at the same time. By enforcing mutual exclusion, the state of that resource is ensured.

5. Research the functions used to perform mutual exclusion​ with pthreads and explain the purpose of each function.

	Functions used to perform mutual exclusion with pthreads are barriers, mutexes and semaphores. Barriers force threads that are working together to wait at a specific point until all threads have reached that point, then they will continue. Mutexes act like locks when a thread is using the shared data, it locks it until it is done with the shared data, then it will unlock it. Semaphores are like mutexes, but keep track of how many callers are waiting on the lock using an integer instead of a binary value. They may be extended to block waiting processes into a queue.

	Mutex has:
	pthread_mutex_init(mutex,attr)---> Initializes the mutex with attributes.
	pthread_mutex_destroy(mutex)-----> Used to free a mutex object.
	pthread_mutexattr_init(attr)-----> Creates the mutex attribute objects.
	pthread_mutexattr_destroy(attr)--> Destroys the mutex attribute objects.
	pthread_mutex_lock(mutex)--------> Locks the mutex so no one else can use it.
	pthread_mutex_trylock(mutex)-----> Checks if the lock is locked or not.
	pthread_mutex_unlock(mutex)------> Unlocks the mutex so another thread can use it.